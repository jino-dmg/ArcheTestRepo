<script type="text/javascript" id="bss-sub-scripts">
function bssSubChangeSubscriptionPrice(bssSubProduct, variantId, bssPlanSelect, bssPlanClosestForm) {
  
    let variant = bssSubProduct.variantIdArrayMap[variantId];

    if (bssPlanSelect && variant) {

        let selectedPlanId = bssPlanSelect.value;

        let planPriceInfo = variant.selling_plan_allocations_by_id[selectedPlanId];
        let bssSubSavingWrapper = bssPlanClosestForm.parentNode.querySelector('.bss-sub-saving-wrapper');
        if (planPriceInfo) {
            let priceElement = document.querySelector('.bss-sub-price-with-discount[data-product-id="' + variant.product_id + '"]')
            if (priceElement) {
                let bssSubOfferPrice = priceElement.querySelector('.bss-sub-offer-price');
              
              if(window.location.host=='untangledhaircare.com'){ //fix by vitu
              	let bssSubOfferPriceCustom = document.querySelector('.bss-sub-offer-price-custom');
                if (bssSubOfferPriceCustom) {
                  document.querySelector(".bss-sub-offer-price-custom").style.display='block'
                    bssSubOfferPriceCustom.innerHTML = planPriceInfo.price_formatted;
                    document.querySelector(".product-price-current").style.textDecoration='line-through'
                }
              }

                
                let bssSubOfferCompareAtPrice = priceElement.querySelector('.bss-sub-offer-compare-at-price');
                let bssSubSavingValue = priceElement.querySelector('.bss-sub-saving-value');
                if (bssSubOfferPrice) {
                    bssSubOfferPrice.innerHTML = planPriceInfo.price_formatted;
                }

                if (bssSubOfferCompareAtPrice) {
                    if (planPriceInfo.price < planPriceInfo.compare_at_price) {
                        bssSubOfferCompareAtPrice.innerHTML = planPriceInfo.compare_at_price_formatted;
                    } else {
                        bssSubOfferCompareAtPrice.innerHTML = "";
                    }

                }

                if (bssSubSavingValue) {
                    bssSubSavingValue.innerHTML = planPriceInfo.saving_value;
                }
                // in case offer price > offer compare at price, and vice versa
                if (bssSubSavingWrapper) {
                    if (planPriceInfo.saving_value < 0) {
                        bssSubSavingWrapper.classList.add("bss-sub-must-hide-saving");
                    } else {
                        bssSubSavingWrapper.classList.remove("bss-sub-must-hide-saving");
                    }
                }

            }

            return true;

        } else {

            bssSubRevertToNormalPrice(bssSubProduct, variantId)

        }




    } else {

        console.log("Could not found plan selector");
    }

    return false;
}
/**
 * Show hide match selling group for selected variant
 */
function showHideMatchSellingGroup(bssSubProduct, variantId, bssSellingPlanHiddenInput, bssPlanClosestForm) {
    let availableGroupIds = bssSubProduct.variantIdArrayMap[variantId].available_group_ids;
    if (Object.keys(availableGroupIds).length) {

        let excludeQueryString = "";
        let includeQueryString = "";
        let index = 1;

        for (let id in availableGroupIds) {

            excludeQueryString += ":not([id='" + id + "'])";
            let suffix = (index == Object.keys(availableGroupIds).length) ? "" : ",";
            includeQueryString +="[id='" + id + "']" + suffix;
            index++;
        }

        let excludeSellingGroups = document.querySelectorAll(".bss-sub-group" + excludeQueryString);

        let includeSellingGroups = document.querySelectorAll(includeQueryString);
        let hasExcludedOptionChecked = false;
        excludeSellingGroups.forEach(i => {
            i.classList.remove("bss-sub-group-show");
            i.classList.add("bss-sub-group-hide");
            if (i.querySelector("input[type='radio']").checked) {
                hasExcludedOptionChecked = true;
            }

        })


        let hasIncludedOptionChecked = false;
        includeSellingGroups.forEach(i => {
            i.classList.remove("bss-sub-group-hide");
            i.classList.add("bss-sub-group-show");
            if (i.querySelector("input[type='radio']").checked) {
                hasIncludedOptionChecked = true;
            }
        })

        if (hasExcludedOptionChecked && !hasIncludedOptionChecked) {
            includeSellingGroups[includeSellingGroups.length - 1].querySelector("input[type='radio']").click();
        }
        let subWrapper = document.querySelectorAll(".bss-sub-purchase-wrapper");
        subWrapper.forEach(i => {
            i.classList.remove("bss-sub-group-hide");
            i.classList.add("bss-sub-group-show");

        })
    } else {

        let subWrapper = document.querySelectorAll(".bss-sub-purchase-wrapper");
        subWrapper.forEach(i => {
            i.classList.remove("bss-sub-group-show");
            i.classList.add("bss-sub-group-hide");



            let selllingGroupRadios = i.querySelectorAll("input[type='radio']");

            if (selllingGroupRadios.length) {

                selllingGroupRadios.forEach(j => {

                    j.checked = false;

                })

            }

        })

        if (bssSellingPlanHiddenInput) {

            bssSellingPlanHiddenInput.value = "";
            let bssSubPlanDescription = bssPlanClosestForm.querySelector('.bss-sub-plan-description');

          	if (bssSubPlanDescription) {
            	bssSubPlanDescription.classList.remove('bss-sub-plan-description-show');
                bssSubPlanDescription.classList.add('bss-sub-plan-description-hide');
          	}
        }


    }
}

function handleSellingPlanEvents(bssSubProduct, bssPlanClosestForm) {
    setTimeout(function() {
        let bssSellingPlanHiddenInput = bssPlanClosestForm.querySelector('input[type="hidden"][name="selling_plan"]')
        let bssVariantInput = bssPlanClosestForm.querySelector('select[name="id"], input[name="id"]');
        let purchaseOptionChecked = bssPlanClosestForm.querySelectorAll('.bss-sub-group-name input[name="purchase_option"]:checked');
        if (purchaseOptionChecked.length == 0) {
            bssSellingPlanHiddenInput.value = null;
            bssSubRevertToNormalPrice(bssSubProduct, bssVariantInput.value);
            /* if not applied any options, inappropriate selling groups are still hide */
            let variantId =  bssVariantInput.value;
            showHideMatchSellingGroup(bssSubProduct, variantId, bssSellingPlanHiddenInput, bssPlanClosestForm);

        } else {

            let closestSubgroup = purchaseOptionChecked[0].closest('.bss-sub-group');
            let bssPlanSelect = closestSubgroup.querySelector('select[name="selling_plan_select"]');
            bssSellingPlanHiddenInput.value = bssPlanSelect.value;
            if (bssVariantInput) {

                let variantId =  bssVariantInput.value;

                showHideMatchSellingGroup(bssSubProduct, variantId, bssSellingPlanHiddenInput, bssPlanClosestForm);


                let isChanged = bssSubChangeSubscriptionPrice(bssSubProduct, variantId, bssPlanSelect, bssPlanClosestForm);
                if (!isChanged) {
                    let bssSubShowSaving = bssPlanClosestForm.parentNode.querySelector('.bss-sub-show-saving');
                    if (bssSubShowSaving) {
                        bssSubShowSaving.classList.add('bss-sub-hide-saving');
                        bssSubShowSaving.classList.remove('bss-sub-show-saving');
                    }
                    return;
                }

            }

            let bssSubHideInfo = bssPlanClosestForm.parentNode.querySelector('.bss-sub-hide-info');
            let bssSubHideSaving = bssPlanClosestForm.parentNode.querySelector('.bss-sub-hide-saving');

            if (bssSubHideInfo) {
                bssSubHideInfo.classList.add('bss-sub-show-info')
                bssSubHideInfo.classList.remove('bss-sub-hide-info');
            }

            if (bssSubHideSaving) {
                bssSubHideSaving.classList.add('bss-sub-show-saving');
                bssSubHideSaving.classList.remove('bss-sub-hide-saving')
            }

          
            let planInfo = bssSubProduct.sellingPlans[bssPlanSelect.value];





            let bssSubPlanDescription = bssPlanClosestForm.querySelector('.bss-sub-plan-description');

            if (bssSubPlanDescription) {

                if (planInfo.description != "null" && planInfo.description != "undefined" && planInfo.description != undefined) {
                    bssSubPlanDescription.innerHTML = unescape(planInfo.description);
                    bssSubPlanDescription.classList.remove('bss-sub-plan-description-hide');
                } else {
                    bssSubPlanDescription.classList.add('bss-sub-plan-description-hide');
                }
            }
        }


    }, 200)
}

function bssSubRevertToNormalPrice(bssSubProduct, variantId) {
    var variant = bssSubProduct.variantIdArrayMap[variantId];
    let planPriceInfo = variant;

    if (planPriceInfo) {

        let priceElement = document.querySelector('.bss-sub-price-with-discount[data-product-id="' + variant.product_id + '"]')
        if (priceElement) {
            let bssSubOfferPrice = priceElement.querySelector('.bss-sub-offer-price');
            let bssSubOfferCompareAtPrice = priceElement.querySelector('.bss-sub-offer-compare-at-price');
            if (bssSubOfferPrice) {
                bssSubOfferPrice.innerHTML = planPriceInfo.price_formatted;

            }

            if (bssSubOfferCompareAtPrice) {

                bssSubOfferCompareAtPrice.innerHTML = planPriceInfo.compare_at_price_formatted;

            }

        }

    } else {

        console.log("Could not found plan price info for variant");
    }



}

function handleOneTimePurchaseClick(bssSubProduct, bssPlanClosestForm) {
    setTimeout(function() {
        let bssSellingPlanHiddenInput = bssPlanClosestForm.querySelector('input[type="hidden"][name="selling_plan"]')
        bssSellingPlanHiddenInput.value = null;
      
      if(window.location.host=='untangledhaircare.com'){ //fix by vitu
        document.querySelector(".product-price-current").style.textDecoration='none'
        document.querySelector(".bss-sub-offer-price-custom").style.display='none'
      }

        let bssVariantInput = bssPlanClosestForm.querySelector('select[name="id"], input[name="id"]');
        if (bssVariantInput) {
            let variantId =  bssVariantInput.value;
            bssSubRevertToNormalPrice(bssSubProduct, variantId);

        }

        let bssSubShowInfo = bssPlanClosestForm.parentNode.querySelector('.bss-sub-show-info');
        let bssSubShowSaving = bssPlanClosestForm.parentNode.querySelector('.bss-sub-show-saving');

        if (bssSubShowSaving) {
            bssSubShowSaving.classList.add('bss-sub-hide-saving');
            bssSubShowSaving.classList.remove('bss-sub-show-saving')
        }

        let bssSubPlanDescription = bssPlanClosestForm.parentNode.querySelector('.bss-sub-plan-description');

        if (bssSubPlanDescription) {
            bssSubPlanDescription.classList.add('bss-sub-plan-description-hide');
        }
    }, 200)
}


function bssSubHandlePlanSelector(bssSubProduct) {

    setTimeout(function() {
        let bssPlanSelector = document.querySelectorAll(".bss-sub-plan-selector");
        if (bssPlanSelector) {
            /* fix buf for actifysocial by XuTho */
            if (window.location.origin == 'https://www.actifysocial.com') {
                bssPlanSelector = bssPlanSelector[1] ? bssPlanSelector[1] : bssPlanSelector[0];
            } else {
                bssPlanSelector = bssPlanSelector[0];
            }
            let bssPlanClosestForm = bssPlanSelector.closest('form[action*="/cart/add"]');
            /* fix buf for md-factor.com by XuTho */
            if (window.location.origin == 'https://www.md-factor.com') {
                bssPlanClosestForm = bssPlanSelector.closest('.product-page--right-column');
            }
            /**
             * Auto hide/show appropriate selling group based on variant;
             */
            let bssVariantInput = bssPlanClosestForm.querySelector('select[name="id"], input[name="id"]');
            let variantId = bssVariantInput.value;
            showHideMatchSellingGroup(bssSubProduct, variantId, null, bssPlanClosestForm);
            /**
             * End
             */
            if (bssPlanClosestForm) {
                let bssVariantSelector = bssPlanClosestForm.querySelectorAll('select, input.single-option-selector__radio, input.product-form__single-selector');
                if (bssVariantSelector) {
                    bssVariantSelector.forEach(function(item, index) {
                        item.addEventListener("change", (event) => {
                            handleSellingPlanEvents(bssSubProduct, bssPlanClosestForm);
                        })

                    })

                    let bssSellingPlanPurchaseOption = bssPlanClosestForm.querySelectorAll('.bss-sub-group-name input[name="purchase_option"]');
                    if (bssSellingPlanPurchaseOption) {
                        bssSellingPlanPurchaseOption.forEach(function(item, index) {
                            item.addEventListener("click", (event) => {

                                handleSellingPlanEvents(bssSubProduct, bssPlanClosestForm);

                            })
                        })
                    }

                    let bssOneTimePurchaseOption = bssPlanClosestForm.querySelectorAll('.bss-sub-otp input[name="purchase_option"] ');

                    if (bssOneTimePurchaseOption) {
                        bssOneTimePurchaseOption.forEach(function(item, index) {
                            item.addEventListener("click", (event) => {

                                handleOneTimePurchaseClick(bssSubProduct, bssPlanClosestForm);

                            })
                        })
                    }

                } else {
                    console.log("Could not found product variant selector!")
                }
            }
        }
    }, 500); 
}

function getPriceWithSellingPlan(bssSubProduct) {
    setTimeout(function () {
        let variantId = ''
        let bssPlanSelector = document.querySelector(".bss-sub-plan-selector");
        if (bssPlanSelector) {
            let bssPlanClosestForm = bssPlanSelector.closest('form[action*="/cart/add"]');
            let bssVariantInput = bssPlanClosestForm.querySelector('select[name="id"], input[name="id"]');
            variantId = bssVariantInput.value;
        }
        let bssPlanSelect = document.querySelector('select[name="selling_plan_select"]');
        let optionPlan = bssPlanSelect.querySelectorAll("option")
        optionPlan.forEach(item => {
            let sellingPlanId = item.value
            item.innerHTML += ` (${
                bssSubProduct
                    .variantIdArrayMap[variantId]
                    .selling_plan_allocations_by_id[sellingPlanId]
                    .price_formatted
            } / Delivery)`
        })
        let oneTimePrice = document.querySelector('#price-one-time');
        oneTimePrice.innerHTML = bssSubProduct.variantIdArrayMap[variantId].price_formatted
    }, 500)
}
</script> 